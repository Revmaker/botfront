type Query {
    conversationsPage(
        projectId: String!
        page: Int!
        pageSize: Int
        status: [String]
        sort: order #in the future if needed to sort on multiple fields passing and array of orders, and modifying the datasource(mongo/conversation.js) accordingly might to the trick
    ): Pagination
    conversation(projectId: String!, id: String!): ConversationContainer!
}

enum order {
    updatedAt_ASC
    updatedAt_DESC
}

type Mutation {
    markAsRead(id: String!): updateResponse!
    updateStatus(id: String!, status: String): updateResponse!
    delete(id: String!): updateResponse!
}

type updateResponse {
    success: Boolean!
}

type Pagination {
    conversations: [ConversationContainer!]!
    pages: Int
}

type ConversationContainer {
    tracker: Conversation
    userId: String
    projectId: String
    status: String
    _id: String
    updatedAt: String
}

type Conversation {
  latest_message: Message,
  events: [Event],
  sender_id: String,
  slots: Any,
  latest_event_time: Float,
  latest_action_name: String,
  latest_input_channel: String,
  followup_action: String,
  active_form: Any,
  paused: Boolean,
}

input ConversationInput {
  latest_message: MessageInput,
  events: [EventInput],
  sender_id: String,
  slots: Any,
  latest_event_time: Float,
  latest_action_name: String,
  latest_input_channel: String,
  followup_action: String,
  active_form: Any,
  paused: Boolean,
}

type Message {
    intent_ranking: [Intent]
    intent: Intent
    text: String
    language: String
    project: String
    entities: [Entity]
}

input MessageInput {
  intent_ranking: [IntentInput!],
  intent: IntentInput!,
  text: String,
  language: String,
  project: String,
  entities: [EntityInput] ,
}

type Entity {
  entity: String,
  value: String,
  start: Int,
  end: Int,
  confidence: Float,
  extractor: String,
  processors: [String],
}

input EntityInput {
  entity: String,
  value: String,
  start: Int,
  end: Int,
  confidence: Float,
  extractor: String,
  processors: [String],
}

type Intent {
    confidence: Float
    name: String
}

input IntentInput {
  confidence: Float,
  name: String,
}

type Event {
  event: String,
  text:  String,
  timestamp: Float,
  name: String,
  policy: String,
  confidence: Float,
  parse_data: Message,
  input_channel: String,
  message_id: String,
  metadata: Any,
  data: Any,
  value: Any,
}

input EventInput {
  event: String,
  text:  String,
  timestamp: Float,
  name: String,
  policy: String,
  confidence: Float,
  parse_data: MessageInput,
  input_channel: String,
  message_id: String,
  metadata: Any,
  data: Any,
  value: Any,
}
